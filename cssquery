#!/usr/bin/env python3
import re
import sys
import os

def cssquery(input_str, verbose=False):
    # Correctly split the input into file path and query
    parts = input_str.split('.css.', 1)
    if len(parts) != 2:
        return 'Invalid input format. Please use: /path/to/file.css.selector[.property]'

    file_path = parts[0] + '.css'
    css_query = parts[1]

    if verbose:
        print(f"File Path: {file_path}")
        print(f"CSS Query: {css_query}")

    # Check if file exists
    if not os.path.isfile(file_path):
        return f'File not found: {file_path}'

    # Read the CSS file
    if verbose:
        print(f"Reading CSS file at {file_path}")

    with open(file_path, 'r') as file:
        css_content = file.read()

    # Define a regex pattern based on the query
    if '.' in css_query:
        # It's a property query
        selector, property_name = css_query.rsplit('.', 1)
        if verbose:
            print(f"Selector: {selector}, Property: {property_name}")
        # Find all instances of the selector
        pattern = rf'{selector}\s*\{{(.*?)\}}'
        matches = re.findall(pattern, css_content, re.DOTALL)
        if verbose:
            print(f"Matches for {selector}: {matches}")
        for match in matches:
            # Find the property value within the selector
            prop_pattern = rf'{property_name}\s*:\s*(.*?);'
            prop_match = re.search(prop_pattern, match)
            if prop_match:
                if verbose:
                    print(f"Property found: {prop_match.group(1)}")
                return prop_match.group(1).strip()
        return None
    else:
        # It's a selector query
        pattern = rf'{css_query}\s*\{{(.*?)\}}'
        matches = re.findall(pattern, css_content, re.DOTALL)
        if matches:
            return [match.strip() for match in matches]
    return None

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: cssquery [-v] /path/to/file.css.selector[.property]")
        sys.exit(1)

    # Check for verbose flag
    verbose = '-v' in sys.argv
    input_str = sys.argv[1] if not verbose else sys.argv[2]

    result = cssquery(input_str, verbose)

    if result:
        if isinstance(result, list):
            for res in result:
                print(res)
        else:
            print(result)
    else:
        print("No match found.")
